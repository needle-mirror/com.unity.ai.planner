using System;
using Unity.Collections;
using Unity.Entities;
using Unity.Jobs;
using Unity.AI.Planner;
using Unity.AI.Planner.DomainLanguage.TraitBased;
using Unity.Burst;
using AI.Planner.Domains;
{{- if include_enums }}
using {{ domain_namespace }}.Enums;
{{- end }}

namespace {{ action_namespace }}.{{ plan_name }}
{
    [BurstCompile]
    struct {{ action_name }} : IJobParallelForDefer
    {
        public Guid ActionGuid;
        {{ for p in parameter_list }}
        const int k_{{ p.name }}Index = {{ for.index }};
        {{- end }}
        const int k_MaxArguments = {{ parameter_list.size }};

        [ReadOnly] NativeArray<StateEntityKey> m_StatesToExpand;
        StateDataContext m_StateDataContext;

        internal {{ action_name }}(Guid guid, NativeList<StateEntityKey> statesToExpand, StateDataContext stateDataContext)
        {
            ActionGuid = guid;
            m_StatesToExpand = statesToExpand.AsDeferredJobArray();
            m_StateDataContext = stateDataContext;
        }

        public static int GetIndexForParameterName(string parameterName)
        {
            {{ for p in parameter_list }}
            if (string.Equals(parameterName, "{{ p.name }}", StringComparison.OrdinalIgnoreCase))
                 return k_{{ p.name }}Index;
            {{- end }}

            return -1;
        }

        void GenerateArgumentPermutations(StateData stateData, NativeList<ActionKey> argumentPermutations)
        {
            {{- for p in parameter_list }}
            var {{ p.name }}Filter = new NativeArray<ComponentType>({{p.required_traits.size + p.prohibited_traits.size}}, Allocator.Temp){ {{- for r in p.required_traits -}} [{{ for.index }}] = ComponentType.ReadWrite<{{ r.fully_qualified_name }}>(),{{ end }}
                                                            {{- for e in p.prohibited_traits }} [{{ for.index + p.required_traits.size }}] = ComponentType.Exclude<{{ e.fully_qualified_name }}>(),{{ end }}  };
            {{- end }}

            {{- for p in parameter_list }}
            var {{ p.name }}ObjectIndices = new NativeList<int>(2, Allocator.Temp);
            stateData.GetTraitBasedObjectIndices({{ p.name }}ObjectIndices, {{ p.name }}Filter);
            {{- end }}

            {{- for p in precondition_traits }}
            var {{ p }}Buffer = stateData.{{ p }}Buffer;
            {{- end }}

            {{- for p in parameter_list }}
            {{ param_index = for.index }}
            for (int i{{ param_index }} = 0; i{{ param_index }} < {{ p.name }}ObjectIndices.Length; i{{ param_index }}++)
            {
                var {{ p.name }}Index = {{ p.name }}ObjectIndices[i{{ param_index }}];
                var {{ p.name }}Object = stateData.TraitBasedObjects[{{ p.name }}Index];

                {{- for p in precondition_list }}
                {{ if param_index == p.loop_index }}
                if (!({{ p.operand_a }} {{ p.operator }} {{ p.operand_b }}))
                    continue;
                {{- end }}
                {{- end }}
            {{- end }}

                var actionKey = new ActionKey(k_MaxArguments) {
                                                        ActionGuid = ActionGuid,
                                                    {{- for p in parameter_list }}
                                                       [k_{{ p.name }}Index] = {{ p.name }}Index,
                                                    {{- end }}
                                                    };


                {{- for customMethod in custom_preconditions }}
                  if (!new {{ customMethod }}().CheckCustomPrecondition(stateData, actionKey))
                    continue;
                {{~ end ~}}

                argumentPermutations.Add(actionKey);

            {{- for p in parameter_list }}
            }
            {{- end }}

            {{- for p in parameter_list }}
            {{ p.name }}ObjectIndices.Dispose();
            {{- end }}

            {{- for p in parameter_list }}
            {{ p.name }}Filter.Dispose();
            {{- end }}
        }

        StateTransitionInfoPair<StateEntityKey, ActionKey, StateTransitionInfo> ApplyEffects(ActionKey action, StateEntityKey originalStateEntityKey)
        {
            var originalState = m_StateDataContext.GetStateData(originalStateEntityKey);
            var originalStateObjectBuffer = originalState.TraitBasedObjects;

            {{- for p in required_object_buffers }}
            {{ if p != "" }}var original{{ p }}Object = originalStateObjectBuffer[action[k_{{ p }}Index]];{{ end }}
            {{- end }}

            var newState = m_StateDataContext.CopyStateData(originalState);

            {{- for p in required_trait_buffers }}
            var new{{ p }}Buffer = newState.{{ p }}Buffer;
            {{- end }}

            {{- for c in created_objects }}
            TraitBasedObject new{{ c.name }}Object;
            TraitBasedObjectId new{{ c.name}}ObjectId;
            using (var {{ c.name}}Types =  new NativeArray<ComponentType>({{ c.required_traits | array.size }}, Allocator.Temp) { {{- for r in c.required_traits -}} [{{for.index}}] = typeof({{r}}), {{ end }}})
            {
                newState.AddObject({{ c.name }}Types, out new{{ c.name }}Object, out new{{ c.name}}ObjectId);
            }
            {{- end }}

            {{- for modifier in object_modifiers }}
            {
                {{- for m in modifier }}
                    {{ m }}
                {{- end }}
            }
            {{- end }}

            {{ for d in removed_objects }}
            newState.RemoveTraitBasedObjectAtIndex(action[k_{{ d }}Index]);
            {{- end }}

            var reward = Reward(originalState, action, newState);
            var StateTransitionInfo = new StateTransitionInfo { Probability = 1f, TransitionUtilityValue = reward };
            var resultingStateKey = m_StateDataContext.GetStateDataKey(newState);

            return new StateTransitionInfoPair<StateEntityKey, ActionKey, StateTransitionInfo>(originalStateEntityKey, action, resultingStateKey, StateTransitionInfo);
        }

        float Reward(StateData originalState, ActionKey action, StateData newState)
        {
            var reward = {{ reward_value }}f;

            {{- for r in custom_rewards }}
            {
                {{- if r.parameters.empty? }}
                {{- $args = "originalState, action, newState" }}
                {{- else }}
                {{- $args = "" }}
                {{- end }}

                {{- for p in r.parameters }}
                var param{{for.index}} = originalState.GetTraitOnObjectAtIndex<{{ p.type }}>(action[{{ p.index }}]);
                {{- $args = $args + "param" + for.index }}
                {{- if for.index != for.length - 1 }}
                    {{- $args = $args + ", " }}
                {{- end }}
                {{- end }}
                reward {{ r.operator }} new {{ r.typename }}().RewardModifier( {{ $args }});
            }
            {{- end }}

            return reward;
        }

        public void Execute(int jobIndex)
        {
            m_StateDataContext.JobIndex = jobIndex; //todo check that all actions set the job index

            var stateEntityKey = m_StatesToExpand[jobIndex];
            var stateData = m_StateDataContext.GetStateData(stateEntityKey);

            var argumentPermutations = new NativeList<ActionKey>(4, Allocator.Temp);
            GenerateArgumentPermutations(stateData, argumentPermutations);

            var transitionInfo = new NativeArray<{{ action_name }}FixupReference>(argumentPermutations.Length, Allocator.Temp);
            for (var i = 0; i < argumentPermutations.Length; i++)
            {
                transitionInfo[i] = new {{ action_name }}FixupReference { TransitionInfo = ApplyEffects(argumentPermutations[i], stateEntityKey) };
            }

            // fixups
            var stateEntity = stateEntityKey.Entity;
            var fixupBuffer = m_StateDataContext.EntityCommandBuffer.AddBuffer<{{ action_name }}FixupReference>(jobIndex, stateEntity);
            fixupBuffer.CopyFrom(transitionInfo);

            transitionInfo.Dispose();
            argumentPermutations.Dispose();
        }

        {{ for p in parameter_list }}
        public static T Get{{ p.name | string.upcase | string.slice 0 length:1 }}{{ p.name | string.slice 1 }}Trait<T>(StateData state, ActionKey action) where T : struct, ITrait
        {
            return state.GetTraitOnObjectAtIndex<T>(action[k_{{ p.name }}Index]);
        }
        {{ end }}
    }

    public struct {{ action_name }}FixupReference : IBufferElementData
    {
        internal StateTransitionInfoPair<StateEntityKey, ActionKey, StateTransitionInfo> TransitionInfo;
    }
}


